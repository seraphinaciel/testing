@use 'sass:math';
@use 'sass:map';
@use 'public/assets/scss/common' as *;

// ^ variables
// * Breakpoints
$medium: 750 !default;
$xlarge: 1200;
$xxlarge: 1400;
$wide: 1920;

// *color
$color-black: #000 !default;

// ^ function
// * 페이지 간격 계산 함수
// * @param {number} $value - 간격 값
// * @return {string} 계산된 간격 값
@function page-gap($value) {
    $result: '';

    @if (type-of($value) == 'number') {
        @if ($value < 0) {
            $result: clamp-cqi($value, $value, --ap-pdp-width);
        } @else {
            $result: clamp-cqi(0, $value, --ap-pdp-width);
        }
    } @else {
        $result: clamp-cqi(0, $value, --ap-pdp-width);
    }

    @return $result;
}

// * 측면 간격 계산 함수
// * @param {number} $parent-w - 부모 요소 너비
// * @param {number} $target-w - 대상 요소 너비
// * @return {number} 계산된 측면 간격
// * 예: padding: 0 side-gap($breakpoint-xxlarge, 1082);
@function side-gap($parent-w, $target-w) {
    @return math.div(($parent-w - $target-w), 2);
}

// ^ mixin
// * 컨테이너 쿼리
// * @param {number} $min-width - 최소 너비 (선택)
@mixin cc($min-width: null) {
    @if $min-width {
        @container cont (min-width:#{$min-width + 0px}) {
            @content;
        }
    } @else {
        @container cont (max-width:#{$medium + 0px}) {
            @content;
        }
    }
}

// * 줄 높이 설정
// * @param {number} $line - 줄 높이 값
// * @param {number} $font - 폰트 크기 값
@mixin line($line, $font) {
    @if ($line != null) {
        line-height: math.div(check-var($line), check-var($font));
    } @else {
        line-height: normal;
    }
}

// * 페이지 폰트 설정
// * @param {number} $mfont - 모바일 폰트 크기
// * @param {number} $font - 데스크톱 폰트 크기 (선택)
// * @param {number} $line - pc 기준 줄 높이 (선택)
// * 사용 예: @include page-fonts(30, 50, 54)
@mixin page-fonts($mfont, $font: null, $line: null) {
    @if ($font) {
        font-size: clamp-cqi(9, $font, --ap-pdp-width);
        @include line($line, $font);
        @include cc {
            font-size: clamp-cqi(9, $mfont, --ap-pdp-width);
        }
    } @else {
        font-size: clamp-cqi(9, $mfont, --ap-pdp-width);
        @include line($line, $mfont);
    }
}

// * 그리드 레이아웃
// * @param {string} $columns - 그리드 열 설정
// * @param {string} $justify - 수평 정렬 (선택)
// * @param {string} $align - 수직 정렬 (선택)
@mixin grid($columns, $justify: null, $align: null) {
    display: grid;
    grid-template-columns: $columns;
    @if ($justify == $align) {
        justify-items: $align;
        align-items: $align;
    } @else {
        place-items: $align $justify;
    }
    @content;
}

// * 최대 너비 설정
// * @param {number} $width - 최대 너비 값
@mixin max-width($width) {
    max-width: $width + 0px;
    $gap: calc(calc((var(--ap-pdp-width) - $width) / 2) / var(--ap-pdp-width) * 100cqi);
    padding: 0 $gap;
    margin: auto;
    text-align: center;
    @content;
}

// * 비디오 비율 고정
// * @param {number} $width - 너비 값
// * @param {number} $height - 높이 값
// * @param {number} $auto - 자동 비율 (선택)
@mixin fixed-to-video($width, $height, $auto: null) {
    aspect-ratio: $auto math.div($width, $height);
    line-height: 0;

    img,
    video,
    source,
    iframe {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
}

// ^ common setting
.view_video_container,
.lv_txt_cnt .lv_title {
    display: none;
}
.lv_txt_cnt p {
    margin: unset;
}

.ap-post {
    container: cont / inline-size;
    font-family: map-get($hera, default);
    font-weight: 500;
    color: $color-black;
    line-height: normal;

    &--th {
        font-family: map-get($hera, th);
    }
    &--jp {
        font-family: map-get($hera, jp);
    }

    &__inner {
        --ap-pdp-width: #{$wide};
        @include cc {
            --ap-pdp-width: #{$medium};
        }
    }

    * {
        padding: 0;
        margin: 0;
        font-style: normal;
        word-break: keep-all;
        list-style: none;
    }

    em {
        color: inherit;
        background-color: transparent;
    }

    sup {
        vertical-align: text-top;
        font-size: inherit;
        line-height: normal;
        position: static;
    }

    .ap-section {
        &__header,
        &__body {
            margin: auto;
        }
    }

    .only-pc {
        display: block;
        @include cc {
            display: none;
        }
    }

    .only-mo {
        display: none;
        @include cc {
            display: block;
        }
    }

    .ap-video video {
        width: 100%;
        height: 100%;
        mask-image: radial-gradient(#fff, #000);
        backface-visibility: hidden;
    }

    .video__controller {
        position: relative;

        .video__poster {
            width: 100%;
            height: 100%;
            object-fit: cover;
            opacity: 1;
            transition: opacity 0.3s linear;
            @include pos-abs($l: 0);
        }

        &.is-loaded {
            .video {
                position: relative;
                z-index: 2;
            }

            .video__poster {
                z-index: 1;
                opacity: 0;
            }
        }
    }

    .ap-image {
        img {
            max-width: 100%;
        }

        &__caption strong {
            font-weight: 900;
        }
    }
}
